#include <stdio.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <freertos/semphr.h>
#include <driver/i2c.h>

#define MLX90614_ADDR   0x5A
#define I2C_SDA_PIN     21
#define I2C_SCL_PIN     22

static esp_err_t i2c_master_init() {
    i2c_config_t i2c_config = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = I2C_SDA_PIN,
        .scl_io_num = I2C_SCL_PIN,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master.clk_speed = 100000
    };

    return i2c_param_config(I2C_NUM_0, &i2c_config);
}

static esp_err_t i2c_master_read(uint8_t addr, uint8_t reg, uint8_t *data_rd, size_t size) {
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, (addr << 1) | I2C_MASTER_WRITE, true);
    i2c_master_write_byte(cmd, reg, true);
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, (addr << 1) | I2C_MASTER_READ, true);
    if (size > 1) {
        i2c_master_read(cmd, data_rd, size - 1, I2C_MASTER_ACK);
    }
    i2c_master_read_byte(cmd, data_rd + size - 1, I2C_MASTER_NACK);
    i2c_master_stop(cmd);
    esp_err_t ret = i2c_master_cmd_begin(I2C_NUM_0, cmd, 1000 / portTICK_PERIOD_MS);
    i2c_cmd_link_delete(cmd);
    return ret;
}

static void mlx90614_read_temperature() {
    uint8_t data[3];

    if (i2c_master_read(MLX90614_ADDR, 0x07, data, 3) == ESP_OK) {
        int16_t temperature_raw = (data[1] << 8) | data[0];
        float temperature = temperature_raw * 0.02 - 273.15;

        printf("Température: %.2f °C\n", temperature);
    } else {
        printf("Erreur de lecture du capteur\n");
    }
}

void app_main() {
    if (i2c_master_init() != ESP_OK) {
        printf("Erreur d'initialisation I2C\n");
        return;
    }

    while (1) {
        mlx90614_read_temperature();
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}
